#ifndef _DENSE_BACK_END_H_
#define _DENSE_BACK_END_H_

#include <mutex>
#include <thread>
#include <condition_variable>
#include <atomic>

#include <DenseMap/DenseMap.h>

#include "DenseBackEndConfig.h"


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class DenseBackEnd
{
public:

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    DenseBackEnd();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ~DenseBackEnd();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool Init(
            DenseMap*               pMap        //< Input: Pointer to the map that should be used
        );

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void DoPoseGraphRelaxation();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    static void _PoseGraphThread( DenseBackEnd* pBE );

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void _PoseRelax();


private:


/////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
    DenseMap*                                               m_pMap;                 // map use for estimating poses

    std::atomic<bool>                                       m_bRun;
    std::mutex                                              m_Mutex;

    std::thread*                                            m_pPGThread;
    std::atomic<bool>                                       m_bDoPGRelaxation;
    std::condition_variable                                 m_PGCond;

};

#endif
