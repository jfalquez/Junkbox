#ifndef _REFERENCE_FRAME_H_
#define _REFERENCE_FRAME_H_

#include <vector>
#include <limits.h>

#include <opencv.hpp>
#include <Eigen/Dense>

#define NO_PARENT INT_MAX

class  ReferenceFrame
{
public:

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ReferenceFrame();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ReferenceFrame(
            const ReferenceFrame&   rRHS        //< Input: Reference frame we are copying
        )
    {
        _Copy(rRHS);
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    ReferenceFrame& operator=(
            const ReferenceFrame&   rRHS        //< Input: Reference frame we are copying
        )
    {
        if( this != &rRHS ) {
            _Copy(rRHS);
        }
        return *this;
    }



    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Setters
    ///

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetId( unsigned int nId );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetParentEdgeId( unsigned int nEdgeId );

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void AddNeighbor(
            unsigned int    nEdgeId     //< Input: Edge that links to the new neighbor
        );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetTime( double dTime );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetWhite();
    void SetGrey();
    void SetBlack();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetKeyframeFlag( bool bFlag = true );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetDepth( unsigned int nDepth );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGreyImage(
            const cv::Mat&      GreyImage       //< Input: Greyscale image
        );
    void SetDepthImage(
            const cv::Mat&      DepthImage      //< Input: Depth image
        );

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void SetGreyThumb(
            const cv::Mat&      GreyThumb       //< Input: Greyscale thumb image
        );
    void SetDepthThumb(
            const cv::Mat&      DepthThumb      //< Input: Depth thumb image
        );




    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Getters
    ///

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetId();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // return edge to parent
    unsigned int GetParentEdgeId();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // HACK hand out reference to our private data
    std::vector<unsigned int>& GetNeighbors();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetNumNeighbors();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetNeighborEdgeId( unsigned int uIdx );

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    double GetTime();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int GetImageHeight() { return m_GreyImage.rows; }
    int GetImageWidth() { return m_GreyImage.cols; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    int GetThumbHeight() { return m_GreyThumb.rows; }
    int GetThumbWidth() { return m_GreyThumb.cols; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cv::Mat& GetGreyImageRef() { return m_GreyImage; }
    cv::Mat& GetDepthImageRef() { return m_DepthImage; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    cv::Mat& GetGreyThumbRef() { return m_GreyThumb; }
    cv::Mat& GetDepthThumbRef() { return m_DepthThumb; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned char* GetGreyImagePtr() { return m_GreyImage.data; }
    unsigned char* GetDepthImagePtr() { return m_DepthImage.data; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned char* GetGreyThumbPtr() { return m_GreyThumb.data; }
    unsigned char* GetDepthThumbPtr() { return m_DepthThumb.data; }

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsWhite();
    bool IsGrey();
    bool IsBlack();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    bool IsKeyframe();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetColor();

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    unsigned int GetDepth();




    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// Others
    ///


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void CopyGreyImageTo(
            cv::Mat&      GreyImage       //< Output: A full copy of the greyscale image
        );
    void CopyDepthImageTo(
            cv::Mat&      DepthImage      //< Output: A full copy of the depth image
        );





private:

    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    void _Copy(
            const ReferenceFrame&       rRHS        //< Input: Reference frame we are copying
        );


/////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
private:
    unsigned int                            m_nId;                  // reference frame ID
    unsigned int                            m_nParentEdgeId;        // for bfs
    std::vector< unsigned int >             m_vNeighborEdgeIds;     // for the co-vis graph

    unsigned int                            m_nColor;
    unsigned int                            m_nDepth;

    /// KEYFRAME VARIABLES
    bool                                    m_bKeyframe;          // true if frame is a keyframe
    double                                  m_dSensorTime;          // time measurements were made
    cv::Mat                                 m_GreyImage;
    cv::Mat                                 m_GreyThumb;
    cv::Mat                                 m_DepthImage;
    cv::Mat                                 m_DepthThumb;

};

#endif
