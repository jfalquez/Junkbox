#include <assert.h>

#include "ReferenceFrame.h"

ReferenceFrame::ReferenceFrame()
               : m_bBrokenLink(false),
                 m_uColor(0),
                 m_uDepth(0),
                 m_uParentEdgeId(NO_PARENT)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetId( unsigned int uId )
{
    m_uId = uId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetTime( double dTime )
{
    m_dSensorTime = dTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetWhite( )
{
    m_uColor = 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetGrey( )
{
    m_uColor = 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetBlack( )
{
    m_uColor = 2;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetDepth( unsigned int uDepth )
{
    m_uDepth = uDepth;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// set our parent edge
void ReferenceFrame::SetParentEdgeId( unsigned int uEdgeId ) {
    m_uParentEdgeId = uEdgeId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// set broken link
void ReferenceFrame::SetBrokenLink()
{
    m_bBrokenLink = true;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::Id()
{
    return m_uId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::Color()
{
    return m_uColor;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::Depth()
{
    return m_uDepth;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::NumNeighbors()
{
    return m_vNeighborEdgeIds.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNeighborEdgeId( unsigned int uIdx )
{
    assert(uIdx < m_vNeighborEdgeIds.size());
    return m_vNeighborEdgeIds[uIdx];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
double ReferenceFrame::Time()
{
    return m_dSensorTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::AddNeighbor( unsigned int uEdgeId )
{
    m_vNeighborEdgeIds.push_back( uEdgeId );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// HACK hand out reference to our private data
std::vector<unsigned int>& ReferenceFrame::Neighbors()
{
    return m_vNeighborEdgeIds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Return edge to parent
unsigned int ReferenceFrame::ParentEdgeId() {
    return m_uParentEdgeId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// check if edge between this frame and the previous one is broken
bool ReferenceFrame::IsBroken()
{
    return m_bBrokenLink;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsWhite()
{
    return m_uColor == 0;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsGrey()
{
    return m_uColor == 1;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsBlack()
{
    return m_uColor == 2;
}

