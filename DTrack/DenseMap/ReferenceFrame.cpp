#include <assert.h>

#include "ReferenceFrame.h"

ReferenceFrame::ReferenceFrame()
               : m_nParentEdgeId(NO_PARENT)
{
    // reset pose
    m_dGlobalPose.setIdentity();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetId(
        unsigned int        nId         //< Input: Frame ID
    )
{
    m_nId = nId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetTime(
        double              dTime       //< Input: Sensor time
    )
{
    m_dSensorTime = dTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetGlobalPose(
        const Eigen::Matrix4d& dPose
    )
{
    m_dGlobalPose = dPose;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetImages(
        const cv::Mat&      GreyImage,      //< Input: Greyscale image
        const cv::Mat&      DepthImage      //< Input: Depth image
    )
{
    m_GreyImage     = GreyImage.clone();
    m_DepthImage    = DepthImage.clone();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetThumbs(
        const cv::Mat&      GreyThumb,      //< Input: Greyscale image
        const cv::Mat&      DepthThumb      //< Input: Depth image
    )
{
    m_GreyThumb     = GreyThumb.clone();
    m_DepthThumb    = DepthThumb.clone();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetParentEdgeId(
        unsigned int nEdgeId
    )
{
    m_nParentEdgeId = nEdgeId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetId()
{
    return m_nId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
double ReferenceFrame::GetTime()
{
    return m_dSensorTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
Eigen::Matrix4d ReferenceFrame::GetGlobalPose()
{
    return m_dGlobalPose;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNumNeighbors()
{
    return m_vNeighborEdgeIds.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::AddNeighbor( unsigned int uEdgeId )
{
    m_vNeighborEdgeIds.push_back( uEdgeId );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNeighborEdgeId( unsigned int uIdx )
{
    assert(uIdx < m_vNeighborEdgeIds.size());
    return m_vNeighborEdgeIds[uIdx];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<unsigned int>& ReferenceFrame::GetNeighbors()
{
    return m_vNeighborEdgeIds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::CopyImages(
        cv::Mat&      GreyImage,      //< Output: Greyscale image
        cv::Mat&      DepthImage      //< Output: Depth image
    )
{
    GreyImage   = m_GreyImage.clone();
    DepthImage  = m_DepthImage.clone();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetParentEdgeId() {
    return m_nParentEdgeId;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::_Copy(
        const ReferenceFrame&       rRHS        //< Input: Reference frame we are copying
    )
{
    m_dSensorTime   = rRHS.m_dSensorTime;
    m_nId           = rRHS.m_nId;
    m_dGlobalPose   = rRHS.m_dGlobalPose;
    m_nParentEdgeId = rRHS.m_nParentEdgeId;
    m_GreyImage     = rRHS.m_GreyImage.clone();
    m_GreyThumb     = rRHS.m_GreyThumb.clone();
    m_DepthImage    = rRHS.m_DepthImage.clone();
    m_DepthThumb    = rRHS.m_DepthThumb.clone();

    // TODO only need to copy this IFF there has been a change, which could be found via the timestamp
    m_vNeighborEdgeIds.clear();
    m_vNeighborEdgeIds.insert( m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.end() );

//            std::copy( rRHS.m_vNeighborEdgeIds.begin(), rRHS.m_vNeighborEdgeIds.end(), m_vNeighborEdgeIds.begin() );

}
