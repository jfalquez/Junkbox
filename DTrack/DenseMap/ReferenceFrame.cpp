#include <assert.h>

#include "ReferenceFrame.h"

ReferenceFrame::ReferenceFrame()
               : m_bIsKeyframe(false),
                 m_uParentEdgeId(NO_PARENT)
{
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetId(
        unsigned int        uId         //< Input: Frame ID
    )
{
    m_uId = uId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetTime(
        double              dTime       //< Input: Sensor time
    )
{
    m_dSensorTime = dTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetImages(
        const cv::Mat&      GreyImage,      //< Input: Greyscale image
        const cv::Mat&      DepthImage      //< Input: Depth image
    )
{
    m_GreyImage = GreyImage.clone();
    m_DepthImage = DepthImage.clone();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetParentEdgeId( unsigned int uEdgeId ) {
    m_uParentEdgeId = uEdgeId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::Id()
{
    return m_uId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
double ReferenceFrame::Time()
{
    return m_dSensorTime;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::NumNeighbors()
{
    return m_vNeighborEdgeIds.size();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::AddNeighbor( unsigned int uEdgeId )
{
    m_vNeighborEdgeIds.push_back( uEdgeId );
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNeighborEdgeId( unsigned int uIdx )
{
    assert(uIdx < m_vNeighborEdgeIds.size());
    return m_vNeighborEdgeIds[uIdx];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<unsigned int>& ReferenceFrame::Neighbors()
{
    return m_vNeighborEdgeIds;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::ParentEdgeId() {
    return m_uParentEdgeId;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsKeyframe()
{
    return m_bIsKeyframe;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::_Copy(
        const ReferenceFrame&       rRHS        //< Input: Reference frame we are copying
    )
{
    m_dSensorTime   = rRHS.m_dSensorTime;
    m_uId           = rRHS.m_uId;
    m_uParentEdgeId = rRHS.m_uParentEdgeId;
    m_bIsKeyframe   = rRHS.m_bIsKeyframe;

    // TODO only need to copy this IFF there has been a change, which could be found via the timestamp
    m_vNeighborEdgeIds.clear();
    m_vNeighborEdgeIds.insert( m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.end() );

//            std::copy( rRHS.m_vNeighborEdgeIds.begin(), rRHS.m_vNeighborEdgeIds.end(), m_vNeighborEdgeIds.begin() );

}
