#include <assert.h>

#include "ReferenceFrame.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////////
ReferenceFrame::ReferenceFrame()
               : m_nParentEdgeId(NO_PARENT),
                 m_nColor(0),
                 m_nDepth(0),
                 m_bKeyframe(false)
{
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetId(
        unsigned int        nId         //< Input: Frame ID
    )
{
    m_nId = nId;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetParentEdgeId(
        unsigned int nEdgeId
    )
{
    m_nParentEdgeId = nEdgeId;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetTime(
        double              dTime       //< Input: Sensor time
    )
{
    m_dSensorTime = dTime;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetGreyImage(
        const cv::Mat&      GreyImage       //< Input: Greyscale image
    )
{
    m_GreyImage     = GreyImage.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetDepthImage(
        const cv::Mat&      DepthImage      //< Input: Depth image
    )
{
    m_DepthImage    = DepthImage.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetGreyThumb(
        const cv::Mat&      GreyThumb       //< Input: Greyscale thumb image
    )
{
    m_GreyThumb     = GreyThumb.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetDepthThumb(
        const cv::Mat&      DepthThumb      //< Input: Depth thumb image
    )
{
    m_DepthThumb    = DepthThumb.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetId()
{
    return m_nId;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
double ReferenceFrame::GetTime()
{
    return m_dSensorTime;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNumNeighbors()
{
    return m_vNeighborEdgeIds.size();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::AddNeighbor( unsigned int nEdgeId )
{
    m_vNeighborEdgeIds.push_back( nEdgeId );
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetNeighborEdgeId( unsigned int nIdx )
{
    assert(nIdx < m_vNeighborEdgeIds.size());
    return m_vNeighborEdgeIds[nIdx];
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
std::vector<unsigned int>& ReferenceFrame::GetNeighbors()
{
    return m_vNeighborEdgeIds;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetWhite( )
{
    m_nColor = 0;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetGrey( )
{
    m_nColor = 1;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetBlack( )
{
    m_nColor = 2;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetKeyframeFlag( bool bFlag )
{
    m_bKeyframe = bFlag;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::SetDepth( unsigned int nDepth )
{
    m_nDepth = nDepth;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetColor()
{
    return m_nColor;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetDepth()
{
    return m_nDepth;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsWhite()
{
    return m_nColor == 0;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsGrey()
{
    return m_nColor == 1;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsBlack()
{
    return m_nColor == 2;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
bool ReferenceFrame::IsKeyframe()
{
    return m_bKeyframe;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::CopyGreyImageTo(
        cv::Mat&      GreyImage       //< Output: Greyscale image
    )
{
    GreyImage   = m_GreyImage.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::CopyDepthImageTo(
        cv::Mat&      DepthImage      //< Output: Depth image
    )
{
    DepthImage  = m_DepthImage.clone();
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////
unsigned int ReferenceFrame::GetParentEdgeId() {
    return m_nParentEdgeId;
}


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void ReferenceFrame::_Copy(
        const ReferenceFrame&       rRHS        //< Input: Reference frame we are copying
    )
{
    m_nId           = rRHS.m_nId;
    m_nParentEdgeId = rRHS.m_nParentEdgeId;

    m_nColor        = rRHS.m_nColor;
    m_nDepth        = rRHS.m_nDepth;

    m_bKeyframe   = rRHS.m_bKeyframe;
    m_dSensorTime   = rRHS.m_dSensorTime;
    m_GreyImage     = rRHS.m_GreyImage.clone();
    m_DepthImage    = rRHS.m_DepthImage.clone();
    m_GreyThumb     = rRHS.m_GreyThumb.clone();
    m_DepthThumb    = rRHS.m_DepthThumb.clone();

    // TODO only need to copy this IFF there has been a change, which could be found via the timestamp
    m_vNeighborEdgeIds.clear();
    m_vNeighborEdgeIds.insert( m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.begin(),
                               rRHS.m_vNeighborEdgeIds.end() );

//            std::copy( rRHS.m_vNeighborEdgeIds.begin(), rRHS.m_vNeighborEdgeIds.end(), m_vNeighborEdgeIds.begin() );

}
